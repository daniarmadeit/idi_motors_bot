"""
RunPod Serverless Worker - —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL —Ñ–æ—Ç–æ ‚Üí –æ—á–∏—â–∞–µ—Ç —á–µ—Ä–µ–∑ IOPaint ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ZIP
"""
import asyncio
import base64
import glob
import io
import logging
import os
import subprocess
import tempfile
import time
import zipfile

import requests
import runpod
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

IOPAINT_URL = "http://127.0.0.1:8080"
iopaint_process = None


def start_iopaint():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç IOPaint —Å–µ—Ä–≤–µ—Ä —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    global iopaint_process

    try:
        logger.info("üé® –ó–∞–ø—É—Å–∫ IOPaint —Å–µ—Ä–≤–µ—Ä–∞...")

        device = "cuda" if os.path.exists("/usr/local/cuda") else "cpu"
        logger.info(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è device: {device}")

        iopaint_process = subprocess.Popen([
            "iopaint", "start",
            "--model=lama",
            f"--device={device}",
            "--port=8080",
            "--host=0.0.0.0"
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        time.sleep(10)
        logger.info("‚úÖ IOPaint —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ IOPaint: {e}")
        raise


def process_photos(photo_data_list: list) -> bytes:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ IOPaint

    Args:
        photo_data_list: –°–ø–∏—Å–æ–∫ base64-encoded —Ñ–æ—Ç–æ

    Returns:
        bytes: ZIP –∞—Ä—Ö–∏–≤ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
    """
    logger.info(f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(photo_data_list)} —Ñ–æ—Ç–æ...")

    temp_dir = tempfile.mkdtemp()
    cleaned_photos = []

    try:
        for idx, photo_base64 in enumerate(photo_data_list):
            try:
                logger.info(f"üì• –î–µ–∫–æ–¥–∏—Ä—É—é —Ñ–æ—Ç–æ {idx + 1}/{len(photo_data_list)}")
                logger.info(f"üìä –†–∞–∑–º–µ—Ä base64 —Å—Ç—Ä–æ–∫–∏: {len(photo_base64)} —Å–∏–º–≤–æ–ª–æ–≤")

                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
                photo_bytes = base64.b64decode(photo_base64)
                logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {len(photo_bytes)} –±–∞–π—Ç")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                img = Image.open(io.BytesIO(photo_bytes))
                logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.size}, —Ñ–æ—Ä–º–∞—Ç: {img.format}")
                original_path = os.path.join(temp_dir, f"photo_{idx:03d}.jpg")
                img.save(original_path)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {original_path}")

                # –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ IOPaint
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ç–æ {idx + 1}...")

                with open(original_path, 'rb') as f:
                    files = {'image': f}
                    data = {'model': 'lama'}

                    logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ IOPaint: {IOPAINT_URL}/api/v1/inpaint")
                    iopaint_response = requests.post(
                        f"{IOPAINT_URL}/api/v1/inpaint",
                        files=files,
                        data=data,
                        timeout=120
                    )

                    logger.info(f"üì° IOPaint –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {iopaint_response.status_code}, —Ä–∞–∑–º–µ—Ä {len(iopaint_response.content)} –±–∞–π—Ç")

                    if iopaint_response.status_code == 200:
                        cleaned_path = os.path.join(temp_dir, f"cleaned_{idx:03d}.jpg")
                        with open(cleaned_path, 'wb') as out:
                            out.write(iopaint_response.content)
                        cleaned_photos.append(cleaned_path)
                        logger.info(f"‚úÖ –§–æ—Ç–æ {idx + 1} –æ—á–∏—â–µ–Ω–æ: {cleaned_path}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ IOPaint: {iopaint_response.status_code}, body: {iopaint_response.text[:200]}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ {idx + 1}: {e}")
                import traceback
                logger.error(traceback.format_exc())
                continue

        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ –∏–∑ {len(cleaned_photos)} —Ñ–æ—Ç–æ...")

        if not cleaned_photos:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 0 –∏–∑ {len(photo_data_list)}")

        zip_buffer = io.BytesIO()

        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for photo_path in cleaned_photos:
                logger.info(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤: {photo_path}")
                zip_file.write(photo_path, os.path.basename(photo_path))

        zip_buffer.seek(0)
        zip_bytes = zip_buffer.read()

        logger.info(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ({len(zip_bytes)} –±–∞–π—Ç), —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {len(cleaned_photos)}")
        return zip_bytes

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        import shutil
        shutil.rmtree(temp_dir, ignore_errors=True)


def handler(event):
    """
    RunPod handler - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ

    Input:
        {
            "photo_urls": ["base64_1", "base64_2", ...]
        }

    Output:
        {
            "status": "success",
            "zip_base64": "..."  # ZIP –∞—Ä—Ö–∏–≤ –≤ base64
        }
    """
    global iopaint_process

    # –ó–∞–ø—É—Å–∫–∞–µ–º IOPaint –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if iopaint_process is None:
        start_iopaint()

    input_data = event.get("input", {})
    photo_data = input_data.get("photo_urls", [])

    if not photo_data:
        return {"error": "No photo_urls provided"}

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        zip_bytes = process_photos(photo_data)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        zip_base64 = base64.b64encode(zip_bytes).decode('utf-8')

        return {
            "status": "success",
            "photo_count": len(photo_data),
            "zip_base64": zip_base64,
            "zip_size": len(zip_bytes)
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())

        return {
            "status": "error",
            "error": str(e)
        }


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RunPod Photo Processing Worker")
    runpod.serverless.start({"handler": handler})
