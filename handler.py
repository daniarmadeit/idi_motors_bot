"""
RunPod Serverless Handler –¥–ª—è BeForward Parser Bot
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç webhook –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
"""
import asyncio
import json
import logging
import os
import sys
import subprocess
import time

import runpod
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

import config
from rus_bot import TelegramBot, BeForwardParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
bot_instance = None
application = None
iopaint_process = None


def start_iopaint():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç IOPaint —Å–µ—Ä–≤–µ—Ä —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    global iopaint_process

    try:
        logger.info("üé® –ó–∞–ø—É—Å–∫ IOPaint —Å–µ—Ä–≤–µ—Ä–∞...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º device (cuda –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ cpu)
        device = "cuda" if os.path.exists("/usr/local/cuda") else "cpu"
        logger.info(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è device: {device}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º IOPaint –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        iopaint_process = subprocess.Popen([
            "iopaint", "start",
            "--model=lama",
            f"--device={device}",
            "--port=8080",
            "--host=0.0.0.0"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(5)

        logger.info("‚úÖ IOPaint —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ IOPaint: {e}")
        raise


def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Ö–æ–ª–æ–¥–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ)"""
    global bot_instance, application

    if not config.BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        raise ValueError("BOT_TOKEN is required")

    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º IOPaint —Å–µ—Ä–≤–µ—Ä
    start_iopaint()

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –∏ –±–æ—Ç–∞
    bot_instance = TelegramBot(config.BOT_TOKEN)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Application –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
    application = Application.builder().token(config.BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot_instance.start_command))
    application.add_handler(CommandHandler("restart", bot_instance.restart_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_instance.handle_url))
    application.add_handler(CallbackQueryHandler(bot_instance.handle_download, pattern="^(download_|generate_)"))
    application.add_error_handler(bot_instance.error_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º application
    asyncio.run(application.initialize())

    logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    return application


async def process_update(update_data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram

    Args:
        update_data: JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram webhook

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    global application

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ Update –æ–±—ä–µ–∫—Ç
        update = Update.de_json(update_data, application.bot)

        if not update:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return {"status": "ignored", "reason": "empty update"}

        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update.update_id}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ application
        await application.process_update(update)

        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.update_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        return {
            "status": "success",
            "update_id": update.update_id
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())

        return {
            "status": "error",
            "error": str(e)
        }


def handler(event):
    """
    RunPod serverless handler

    Args:
        event: –°–æ–±—ã—Ç–∏–µ –æ—Ç RunPod —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    global application

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (—Ö–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç)
    if application is None:
        try:
            initialize_bot()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                "error": f"Initialization failed: {str(e)}"
            }

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    input_data = event.get("input", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if "telegram_update" in input_data:
        # Webhook –æ—Ç Telegram
        update_data = input_data["telegram_update"]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        result = asyncio.run(process_update(update_data))

        return result

    elif "url" in input_data:
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ URL (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        url = input_data["url"]

        try:
            parser = BeForwardParser()
            car_data = parser.parse_car_data(url)
            formatted = parser.format_car_data(car_data)

            return {
                "status": "success",
                "car_data": car_data,
                "formatted": formatted
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {
                "status": "error",
                "error": str(e)
            }

    else:
        return {
            "error": "Invalid input. Expected 'telegram_update' or 'url'"
        }


# –ó–∞–ø—É—Å–∫ RunPod serverless
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RunPod Serverless Handler")
    runpod.serverless.start({"handler": handler})
