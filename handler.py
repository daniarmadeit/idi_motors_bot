"""
RunPod Serverless Worker - —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ base64 —Ñ–æ—Ç–æ ‚Üí –æ—á–∏—â–∞–µ—Ç —á–µ—Ä–µ–∑ IOPaint ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ZIP
"""
import asyncio
import base64
import glob
import io
import logging
import os
import subprocess
import tempfile
import time
import zipfile

import requests
import runpod
from PIL import Image, ImageDraw

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∏–∑ config.py)
IOPAINT_URL = "http://127.0.0.1:8080"
IOPAINT_INPAINT_ENDPOINT = "/api/v1/inpaint"
IOPAINT_UPSCALE_ENDPOINT = "/api/v1/run_plugin_gen_image"
WATERMARK_WIDTH = 300
WATERMARK_HEIGHT = 30
INPAINT_TIMEOUT = 120
UPSCALE_TIMEOUT = 180
UPSCALE_FACTOR = 2
MIN_RESOLUTION_WIDTH = 1920
MIN_RESOLUTION_HEIGHT = 1080

iopaint_process = None


def create_watermark_mask(img_width: int, img_height: int) -> Image.Image:
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ BeForward (–≤–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É)"""
    mask = Image.new('L', (img_width, img_height), 0)
    draw = ImageDraw.Draw(mask)

    x1 = (img_width - WATERMARK_WIDTH) // 2
    y1 = img_height - WATERMARK_HEIGHT
    x2 = x1 + WATERMARK_WIDTH
    y2 = img_height

    draw.rectangle([x1, y1, x2, y2], fill=255)
    return mask


def image_to_base64(img: Image.Image) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    buffer = io.BytesIO()
    if img.mode == 'RGBA':
        img = img.convert('RGB')
    img.save(buffer, format='PNG')
    return base64.b64encode(buffer.getvalue()).decode('utf-8')


def remove_watermark(img: Image.Image) -> Image.Image:
    """–£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ IOPaint"""
    try:
        img_width, img_height = img.size

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–∞—Å–∫—É –≤ base64
        img_base64 = image_to_base64(img)
        mask = create_watermark_mask(img_width, img_height)
        mask_base64 = image_to_base64(mask)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ IOPaint
        payload = {
            'image': img_base64,
            'mask': mask_base64,
            'ldmSampler': 'plms',
            'hdStrategy': 'Original',
        }

        response = requests.post(
            f"{IOPAINT_URL}{IOPAINT_INPAINT_ENDPOINT}",
            json=payload,
            timeout=INPAINT_TIMEOUT
        )

        if response.status_code != 200:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ IOPaint: HTTP {response.status_code}")
            logger.error(f"Response body: {response.text}")
            logger.error(f"Request payload keys: image_len={len(img_base64)}, mask_len={len(mask_base64)}")
            return img  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

        # IOPaint API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        result_bytes = response.content
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result_bytes)} –±–∞–π—Ç –æ—Ç IOPaint")

        return Image.open(io.BytesIO(result_bytes))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è watermark: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return img  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ


def upscale_image(img: Image.Image) -> Image.Image:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ RealESRGAN"""
    try:
        img_base64 = image_to_base64(img)

        payload = {
            'image': img_base64,
            'name': 'RealESRGAN',
            'upscale': UPSCALE_FACTOR
        }

        response = requests.post(
            f"{IOPAINT_URL}{IOPAINT_UPSCALE_ENDPOINT}",
            json=payload,
            timeout=UPSCALE_TIMEOUT
        )

        if response.status_code != 200:
            logger.warning(f"‚ö†Ô∏è Upscaling –Ω–µ —É–¥–∞–ª—Å—è (HTTP {response.status_code})")
            logger.warning(f"Response body: {response.text}")
            logger.warning(f"Request: {IOPAINT_URL}{IOPAINT_UPSCALE_ENDPOINT}")
            logger.warning(f"Payload: name=RealESRGAN, upscale={UPSCALE_FACTOR}")
            return img  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

        # IOPaint API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        result_bytes = response.content
        logger.info(f"‚úÖ Upscale: –ø–æ–ª—É—á–µ–Ω–æ {len(result_bytes)} –±–∞–π—Ç")

        return Image.open(io.BytesIO(result_bytes))

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ upscaling: {e}")
        import traceback
        logger.warning(traceback.format_exc())
        return img  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ


def start_iopaint():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç IOPaint —Å–µ—Ä–≤–µ—Ä —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    global iopaint_process

    try:
        logger.info("üé® –ó–∞–ø—É—Å–∫ IOPaint —Å–µ—Ä–≤–µ—Ä–∞...")

        device = "cuda" if os.path.exists("/usr/local/cuda") else "cpu"
        logger.info(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è device: {device}")

        iopaint_process = subprocess.Popen([
            "iopaint", "start",
            "--model=lama",
            f"--device={device}",
            "--port=8080",
            "--host=0.0.0.0",
            "--enable-realesrgan",
            "--realesrgan-model=realesr-general-x4v3"
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ IOPaint (10 —Å–µ–∫)...")
        time.sleep(10)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        try:
            test_response = requests.get(f"{IOPAINT_URL}/api/v1/server-config", timeout=5)
            if test_response.status_code == 200:
                logger.info("‚úÖ IOPaint —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
                logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥: {test_response.text[:200]}")
            else:
                logger.warning(f"‚ö†Ô∏è IOPaint –∑–∞–ø—É—â–µ–Ω, –Ω–æ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {test_response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå IOPaint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã: {e}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ IOPaint: {e}")
        raise


def process_photos(photo_data_list: list) -> bytes:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ IOPaint

    Args:
        photo_data_list: –°–ø–∏—Å–æ–∫ base64-encoded —Ñ–æ—Ç–æ

    Returns:
        bytes: ZIP –∞—Ä—Ö–∏–≤ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
    """
    logger.info(f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(photo_data_list)} —Ñ–æ—Ç–æ...")

    temp_dir = tempfile.mkdtemp()
    cleaned_photos = []

    try:
        for idx, photo_base64 in enumerate(photo_data_list):
            try:
                logger.info(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ {idx + 1}/{len(photo_data_list)}")

                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                photo_bytes = base64.b64decode(photo_base64)
                img = Image.open(io.BytesIO(photo_bytes))
                img_width, img_height = img.size
                logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.size}")

                # –£–¥–∞–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —á–µ—Ä–µ–∑ IOPaint
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–∏–µ watermark...")
                cleaned_img = remove_watermark(img)

                # Upscale –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–µ–Ω—å—à–µ Full HD
                if img_width * img_height < MIN_RESOLUTION_WIDTH * MIN_RESOLUTION_HEIGHT:
                    logger.info(f"üìà Upscaling {img_width}x{img_height} ‚Üí {img_width*UPSCALE_FACTOR}x{img_height*UPSCALE_FACTOR}...")
                    cleaned_img = upscale_image(cleaned_img)
                else:
                    logger.info(f"‚úì Upscale –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ {img_width}x{img_height})")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                cleaned_path = os.path.join(temp_dir, f"cleaned_{idx:03d}.jpg")
                cleaned_img.save(cleaned_path, 'JPEG', quality=95)
                cleaned_photos.append(cleaned_path)

                logger.info(f"‚úÖ –§–æ—Ç–æ {idx + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ {idx + 1}: {e}")
                import traceback
                logger.error(traceback.format_exc())
                continue

        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ –∏–∑ {len(cleaned_photos)} —Ñ–æ—Ç–æ...")

        if not cleaned_photos:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 0 –∏–∑ {len(photo_data_list)}")

        zip_buffer = io.BytesIO()

        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for photo_path in cleaned_photos:
                logger.info(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤: {photo_path}")
                zip_file.write(photo_path, os.path.basename(photo_path))

        zip_buffer.seek(0)
        zip_bytes = zip_buffer.read()

        logger.info(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ({len(zip_bytes)} –±–∞–π—Ç), —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {len(cleaned_photos)}")
        return zip_bytes

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        import shutil
        shutil.rmtree(temp_dir, ignore_errors=True)


def handler(event):
    """
    RunPod handler - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ

    Input:
        {
            "photo_urls": ["base64_1", "base64_2", ...]
        }

    Output:
        {
            "status": "success",
            "zip_base64": "..."  # ZIP –∞—Ä—Ö–∏–≤ –≤ base64
        }
    """
    global iopaint_process

    # –ó–∞–ø—É—Å–∫–∞–µ–º IOPaint –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if iopaint_process is None:
        start_iopaint()

    input_data = event.get("input", {})
    photo_data = input_data.get("photo_urls", [])

    if not photo_data:
        return {"error": "No photo_urls provided"}

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        zip_bytes = process_photos(photo_data)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        zip_base64 = base64.b64encode(zip_bytes).decode('utf-8')

        return {
            "status": "success",
            "photo_count": len(photo_data),
            "zip_base64": zip_base64,
            "zip_size": len(zip_bytes)
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())

        return {
            "status": "error",
            "error": str(e)
        }


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RunPod Photo Processing Worker")
    runpod.serverless.start({"handler": handler})
