"""
IDI Motors Bot - Fast & Clean Version
Telegram –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ BeForward.jp —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ç–æ –Ω–∞ RunPod
"""
import asyncio
import base64
import io
import logging
import os
import tempfile
import zipfile
from typing import Dict, Optional

import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from PIL import Image
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv('.env.local')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
RUNPOD_API_KEY = os.getenv('RUNPOD_API_KEY')
RUNPOD_ENDPOINT_ID = os.getenv('RUNPOD_ENDPOINT_ID')
RUNPOD_API_URL = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/runsync"

MAX_PHOTOS = 30
ZAMBIA_COUNTRY_ID = 88
USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'


class BeForwardParser:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä BeForward.jp"""

    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': USER_AGENT})

    def parse(self, url: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º Zambia country ID –¥–ª—è –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –ø–æ—Ä—Ç–æ–≤
        url_with_zambia = f"{url}{'&' if '?' in url else '?'}tp_country_id={ZAMBIA_COUNTRY_ID}"
        logger.info(f"üåç –ü–∞—Ä—Å–∏–Ω–≥: {url_with_zambia}")

        # –ü–æ–ª—É—á–∞–µ–º HTML
        response = self.session.get(url_with_zambia, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {
            'url': url,
            'car_name': self._get_car_name(soup),
            'specs': self._get_specs(soup),
            'price': self._get_price_selenium(url_with_zambia),
            'photo_url': self._get_photo_url(soup)
        }

        return data

    def _get_car_name(self, soup) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        # –ü—Ä–æ–±—É–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ (—Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ BeForward)
        h1 = soup.select_one('#list-detail > div.list-detail-right > div > h1')
        if not h1:
            h1 = soup.select_one('#content > h1')
        return h1.get_text(strip=True) if h1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"

    def _get_specs(self, soup) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        specs = {}
        for row in soup.select('.vehicle-detail-list tr'):
            th = row.select_one('th')
            td = row.select_one('td')
            if th and td:
                key = th.get_text(strip=True)
                value = td.get_text(strip=True)
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
                if key not in ['Chassis', 'Sub Ref', 'Ref. No', 'Ref No']:
                    specs[key] = value
        return specs

    def _get_price_selenium(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É —á–µ—Ä–µ–∑ Selenium (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)"""
        driver = None
        try:
            logger.info("‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            options = Options()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-extensions')
            options.add_argument(f'user-agent={USER_AGENT}')
            options.page_load_strategy = 'eager'  # –ù–µ –∂–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
            prefs = {"profile.managed_default_content_settings.images": 2}
            options.add_experimental_option("prefs", prefs)

            driver = webdriver.Chrome(options=options)
            driver.get(url)

            # –£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ü–µ–Ω–æ–π
            wait = WebDriverWait(driver, 10)
            price_elem = wait.until(
                EC.presence_of_element_located((By.ID, "selected_total_price"))
            )

            price_text = price_elem.text.strip()
            logger.info(f"‚úÖ –¶–µ–Ω–∞: {price_text}")
            return price_text if price_text else "ASK"

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Selenium: {e}")
            return "ASK"
        finally:
            if driver:
                driver.quit()

    def _get_photo_url(self, soup) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ ZIP —Å —Ñ–æ—Ç–æ"""
        link = soup.select_one('a.parts-shop-img')
        if link and 'href' in link.attrs:
            href = link['href']
            if href.startswith('/'):
                return f"https://www.beforward.jp{href}"
            return href
        return None

    def download_photos(self, photo_url: str) -> list:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ ZIP"""
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ...")
        response = self.session.get(photo_url, timeout=120)
        response.raise_for_status()

        temp_dir = tempfile.mkdtemp()
        zip_path = os.path.join(temp_dir, 'photos.zip')

        with open(zip_path, 'wb') as f:
            f.write(response.content)

        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)

        # –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
        photos = []
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    photos.append(os.path.join(root, file))

        logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photos)} —Ñ–æ—Ç–æ")
        return photos

    def format_message(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
        lines = [f"üöó {data['car_name']}", f"üí∞ –¶–µ–Ω–∞: {data['price']}", ""]

        for key, value in data['specs'].items():
            lines.append(f"‚ñ´Ô∏è {key}: {value}")

        lines.append(f"\nüîó {data['url']}")
        return "\n".join(lines)


class RusBotFast:
    """–ë—ã—Å—Ç—Ä—ã–π Telegram –±–æ—Ç —Å RunPod –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""

    def __init__(self):
        self.parser = BeForwardParser()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ BeForward.jp –∏ –ø–æ–ª—É—á–∏:\n"
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
            "‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ (–±–µ–∑ watermark)\n"
            "‚úÖ Upscale –¥–æ Full HD\n\n"
            "‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ GPU –≤ –æ–±–ª–∞–∫–µ!"
        )

    async def handle_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL BeForward"""
        url = update.message.text.strip()

        if 'beforward.jp' not in url.lower():
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ BeForward.jp")
            return

        status = await update.message.reply_text("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥...")

        try:
            # 1. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            data = self.parser.parse(url)
            message_text = self.parser.format_message(data)

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            if not data['photo_url']:
                await status.edit_text(message_text)
                return

            # 3. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            await status.edit_text("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ...")
            photos = self.parser.download_photos(data['photo_url'])

            if not photos:
                await status.edit_text(message_text + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ RunPod –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await status.edit_text(
                f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ {min(len(photos), MAX_PHOTOS)} —Ñ–æ—Ç–æ –Ω–∞ GPU...\n"
                f"–≠—Ç–æ –∑–∞–π–º—ë—Ç ~30-60 —Å–µ–∫"
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            photo_data = []
            for photo_path in photos[:MAX_PHOTOS]:
                with open(photo_path, 'rb') as f:
                    photo_data.append(base64.b64encode(f.read()).decode('utf-8'))

            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(photo_data)} —Ñ–æ—Ç–æ –Ω–∞ RunPod...")

            # –í—ã–∑–æ–≤ RunPod API
            response = requests.post(
                RUNPOD_API_URL,
                json={"input": {"photo_urls": photo_data}},
                headers={
                    "Authorization": f"Bearer {RUNPOD_API_KEY}",
                    "Content-Type": "application/json"
                },
                timeout=300
            )

            if response.status_code != 200:
                raise Exception(f"RunPod error: {response.status_code}")

            result = response.json()
            output = result.get('output', {})

            if output.get('status') == 'success':
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º ZIP
                zip_base64 = output.get('zip_base64')
                zip_bytes = base64.b64decode(zip_base64)

                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ZIP ({len(zip_bytes)} –±–∞–π—Ç)")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await status.delete()
                car_name = data['car_name'].replace('/', '_')
                await update.message.reply_document(
                    document=io.BytesIO(zip_bytes),
                    filename=f"{car_name}.zip",
                    caption=message_text
                )

                logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ!")

            else:
                error = output.get("error", "Unknown error")
                await status.edit_text(message_text + f"\n\n‚ùå –û—à–∏–±–∫–∞: {error}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            try:
                await status.delete()
            except:
                pass
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        app = Application.builder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_url))

        logger.info("üöÄ RusBotFast –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üì° RunPod endpoint: {RUNPOD_ENDPOINT_ID}")

        app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local")
    elif not RUNPOD_API_KEY:
        logger.error("‚ùå RUNPOD_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local")
    else:
        bot = RusBotFast()
        bot.run()
