"""
BeForward Parser Bot - Telegram –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å BeForward.jp
"""
import asyncio
import base64
import glob
import io
import logging
import os
import re
import shutil
import tempfile
import time
import zipfile
from typing import Dict, List, Optional, Tuple

import requests
from bs4 import BeautifulSoup
from openai import OpenAI
from PIL import Image, ImageDraw
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.constants import ChatAction

import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BeForwardParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è BeForward.jp —Å AI –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': config.USER_AGENT})
        self.excluded_keywords = config.EXCLUDED_FIELDS

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
        if not config.OPENAI_API_KEY:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            self.openai_client = None
        else:
            self.openai_client = OpenAI(api_key=config.OPENAI_API_KEY)
    
    def parse_car_data(self, url: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å BeForward"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ó–∞–º–±–∏–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –ø–æ—Ä—Ç—ã
            url_with_zambia = self._add_zambia_country_param(url)
            logger.info(f"üåç URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã: {url_with_zambia}")
            
            response = self.session.get(url_with_zambia, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            car_data = {
                'car_name': None,
                'specs': {},
                'lusaka_price': None,  # –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (Dar es Salaam RORO)
                'photo_download_url': None,
                'photo_urls': [],  # –î–ª—è –≤—Ç–æ—Ä–æ–π –≤–µ—Ä—Å–∏–∏
                'url': url
            }
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            car_data['car_name'] = self._extract_car_name(soup)
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            car_data['specs'] = self._extract_specs(soup)
            
            # –¶–µ–Ω–∞ –¥–ª—è Dar es Salaam (RORO)
            car_data['lusaka_price'] = self._extract_lusaka_price(soup)
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
            car_data['photo_download_url'] = self._extract_photo_download_url(soup)
            
            # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è, —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ
            if car_data['photo_download_url'] == "COLLECT_PHOTOS":
                car_data['photo_urls'] = self._collect_photo_urls(soup)
            
            return car_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'error': str(e)}
    
    def _extract_car_name(self, soup: BeautifulSoup) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        # –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        h1_selector_v1 = "#list-detail > div.list-detail-right.list-detail-right-renewal > div.car-info-area.cf > div.car-info-flex-area > div > div > h1"
        h1_elem = soup.select_one(h1_selector_v1)
        
        if h1_elem:
            return h1_elem.get_text(strip=True)
        
        # –í—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        make_elem = soup.select_one("#content > h1 > div.make")
        model_elem = soup.select_one("#content > h1 > div.model-year")
        
        if make_elem and model_elem:
            make = make_elem.get_text(strip=True)
            model_text = model_elem.get_text(strip=True)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å "part model:", –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            if "part model:" in model_text.lower():
                model = model_text.split('\n')[0].strip()
            else:
                model = model_text
            
            return f"{make} {model}"
        
        # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—â–∏–π h1
        h1_selector_v2 = "#content > h1"
        h1_elem = soup.select_one(h1_selector_v2)
        
        if h1_elem:
            return h1_elem.get_text(strip=True)
        
        return None
    
    def _add_zambia_country_param(self, url: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ó–∞–º–±–∏–∏ (–ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —Ü–µ–Ω)

        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã BeForward

        Returns:
            URL —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º tp_country_id
        """
        country_param = f'tp_country_id={config.ZAMBIA_COUNTRY_ID}'

        if '?' in url:
            if 'tp_country_id' not in url:
                return f'{url}&{country_param}'
            return re.sub(r'tp_country_id=\d+', country_param, url)
        return f'{url}?{country_param}'
    
    def _extract_lusaka_price(self, soup: BeautifulSoup) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ (DAR ES SALAAM)"""
        try:
            # –ò—â–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Ä—Ç–æ–≤/–≥–æ—Ä–æ–¥–æ–≤
            port_titles = soup.select('p.port-list-title')
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(port_titles)}")
            
            if not port_titles:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
                return None
            
            # –ë–ï–†–Å–ú –°–ê–ú–´–ô –ü–ï–†–í–´–ô –ì–û–†–û–î
            first_port = port_titles[0]
            city_name = first_port.get_text(strip=True)
            logger.info(f"‚úÖ –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥: '{city_name}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ DAR ES SALAAM
            if 'dar' not in city_name.lower() or 'salaam' not in city_name.lower():
                logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–µ DAR ES SALAAM, –∞ '{city_name}'")
                # –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –±–µ—Ä—ë–º –µ–≥–æ —Ü–µ–Ω—É
            
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π tr —ç–ª–µ–º–µ–Ω—Ç
            tr_element = first_port.find_parent('tr')
            
            if not tr_element:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π TR —ç–ª–µ–º–µ–Ω—Ç!")
                return None
            
            logger.info(f"üìÑ HTML —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n{tr_element.prettify()[:1000]}")
            
            # –ò—â–µ–º —è—á–µ–π–∫—É —Å —Ü–µ–Ω–æ–π (table-total-price)
            price_cell = tr_element.select_one('td.table-total-price')
            
            if price_cell:
                logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ table-total-price")
                # –ò—â–µ–º span —Å —Ü–µ–Ω–æ–π
                price_span = price_cell.select_one('span.fn-total-price-display')
                
                if price_span:
                    price_text = price_span.get_text(strip=True)
                    logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: '{price_text}'")
                    
                    # –£–¥–∞–ª—è–µ–º &nbsp; –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    price_text = price_text.replace('\xa0', '').replace('&nbsp;', '').replace(' ', '')
                    logger.info(f"‚ú® –û—á–∏—â–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: '{price_text}'")
                    return price_text
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω span.fn-total-price-display")
                    logger.info(f"üìÑ HTML —è—á–µ–π–∫–∏ —Å —Ü–µ–Ω–æ–π:\n{price_cell.prettify()}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ td.table-total-price")
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ td –≤ —Å—Ç—Ä–æ–∫–µ
                all_tds = tr_element.find_all('td')
                logger.info(f"üì¶ –í—Å–µ–≥–æ TD –≤ —Å—Ç—Ä–æ–∫–µ: {len(all_tds)}")
                for idx, td in enumerate(all_tds):
                    td_classes = td.get('class', [])
                    logger.info(f"TD #{idx+1} –∫–ª–∞—Å—Å—ã: {td_classes}")
            
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return None
    
    def _extract_specs(self, soup: BeautifulSoup) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        specs = {}
        
        # –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        table_elem = soup.select_one("#spec > table")
        
        if not table_elem:
            # –í—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            table_elem = soup.select_one("#content > div.specs > table")
        
        if table_elem:
            rows = table_elem.find_all('tr')
            
            for row in rows:
                cells = row.find_all(['td', 'th'])
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –ø–∞—Ä–∞–º–∏
                i = 0
                while i < len(cells) - 1:
                    key = cells[i].get_text(strip=True)
                    value = cells[i + 1].get_text(strip=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    if key and value:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)
                        should_exclude = False
                        for keyword in self.excluded_keywords:
                            if keyword.lower() in key.lower():
                                should_exclude = True
                                break
                        
                        if should_exclude:
                            i += 2
                            continue
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å "-"
                        if value == "-":
                            i += 2
                            continue
                        
                        # –£–¥–∞–ª—è–µ–º "Find parts for this model code" –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π
                        if "Find parts for this model code" in value:
                            value = value.replace("Find parts for this model code", "").strip()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                        if value and value != "-":
                            specs[key] = value
                    
                    i += 2  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ
        
        return specs

    def _extract_photo_download_url(self, soup: BeautifulSoup) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"""
        # –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä—è–º–∞—è –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_selector = "#list-detail > div.list-detail-left.list-detail-left-renewal > div.vehicle-share-content > div.dl-pic-area > a"
        download_link = soup.select_one(download_selector)
        
        if download_link:
            href = download_link.get('href')
            if href and href.startswith('/'):
                return "https://www.beforward.jp" + href
            return href
        
        # –í—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è - —Å–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞
        slider_wrapper = soup.select_one("#vehicle-photo-slider > div.swiper-wrapper")
        if slider_wrapper:
            slides = slider_wrapper.select("div.swiper-slide")
            if slides:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                return "COLLECT_PHOTOS"
        
        return None
    
    def _collect_photo_urls(self, soup: BeautifulSoup) -> list:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞"""
        photo_urls = []
        slider_wrapper = soup.select_one("#vehicle-photo-slider > div.swiper-wrapper")
        
        if slider_wrapper:
            slides = slider_wrapper.select("div.swiper-slide")
            for slide in slides:
                # –ò—â–µ–º img –≤ —Å–ª–∞–π–¥–µ
                img = slide.select_one("img")
                if img and img.get("src"):
                    img_src = img.get("src")
                    # –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–π
                    if img_src.startswith("//"):
                        img_src = "https:" + img_src
                    elif img_src.startswith("/"):
                        img_src = "https://www.beforward.jp" + img_src
                    photo_urls.append(img_src)
                
                # –¢–∞–∫–∂–µ –∏—â–µ–º data-src (–¥–ª—è lazy loading)
                if img and img.get("data-src"):
                    img_src = img.get("data-src")
                    if img_src.startswith("//"):
                        img_src = "https:" + img_src
                    elif img_src.startswith("/"):
                        img_src = "https://www.beforward.jp" + img_src
                    photo_urls.append(img_src)
        
        return list(set(photo_urls))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    
    def _check_iopaint_server(self, iopaint_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IOPaint —Å–µ—Ä–≤–µ—Ä–∞

        Args:
            iopaint_url: URL IOPaint —Å–µ—Ä–≤–µ—Ä–∞

        Returns:
            True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            response = self.session.get(
                f"{iopaint_url}{config.IOPAINT_CONFIG_ENDPOINT}",
                timeout=5
            )
            response.raise_for_status()
            logger.info("‚úÖ IOPaint —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå IOPaint —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {iopaint_url}")
            logger.error("–ó–∞–ø—É—Å—Ç–∏—Ç–µ start_iopaint.bat –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ!")
            return False

    def _create_watermark_mask(self, img_width: int, img_height: int) -> Image.Image:
        """–°–æ–∑–¥–∞—ë—Ç –º–∞—Å–∫—É –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞

        Args:
            img_width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            PIL Image —Å –º–∞—Å–∫–æ–π –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        """
        mask = Image.new('L', (img_width, img_height), 0)
        draw = ImageDraw.Draw(mask)

        x1 = (img_width - config.WATERMARK_WIDTH) // 2
        y1 = img_height - config.WATERMARK_HEIGHT
        x2 = x1 + config.WATERMARK_WIDTH
        y2 = img_height

        draw.rectangle([x1, y1, x2, y2], fill=255)
        return mask

    def _image_to_base64(self, img: Image.Image) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64

        Args:
            img: PIL Image –æ–±—ä–µ–∫—Ç

        Returns:
            Base64 —Å—Ç—Ä–æ–∫–∞
        """
        buffer = io.BytesIO()
        if img.mode == 'RGBA':
            img = img.convert('RGB')
        img.save(buffer, format='PNG')
        return base64.b64encode(buffer.getvalue()).decode('utf-8')

    def _remove_watermark(
        self,
        img: Image.Image,
        iopaint_url: str
    ) -> Optional[Image.Image]:
        """–£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ IOPaint

        Args:
            img: PIL Image –æ–±—ä–µ–∫—Ç
            iopaint_url: URL IOPaint —Å–µ—Ä–≤–µ—Ä–∞

        Returns:
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            img_width, img_height = img.size

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–∞—Å–∫—É –≤ base64
            img_base64 = self._image_to_base64(img)
            mask = self._create_watermark_mask(img_width, img_height)
            mask_base64 = self._image_to_base64(mask)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ IOPaint
            payload = {
                'image': img_base64,
                'mask': mask_base64,
                'ldmSampler': 'plms',
                'hdStrategy': 'Original',
            }

            response = self.session.post(
                f"{iopaint_url}{config.IOPAINT_INPAINT_ENDPOINT}",
                json=payload,
                timeout=config.INPAINT_TIMEOUT
            )

            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: HTTP {response.status_code}")
                logger.error(f"Response: {response.text[:500]}")
                return None

            # IOPaint API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ (PNG)
            # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: —Å–µ—Ä–≤–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BGR->RGB, –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
            # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result_bytes = response.content
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result_bytes)} –±–∞–π—Ç –æ—Ç IOPaint")

            return Image.open(io.BytesIO(result_bytes))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None

    def _upscale_image(
        self,
        img: Image.Image,
        iopaint_url: str
    ) -> Optional[Image.Image]:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ RealESRGAN

        Args:
            img: PIL Image –æ–±—ä–µ–∫—Ç
            iopaint_url: URL IOPaint —Å–µ—Ä–≤–µ—Ä–∞

        Returns:
            –ê–ø—Å–∫–µ–π–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            img_base64 = self._image_to_base64(img)

            payload = {
                'image': img_base64,
                'name': 'RealESRGAN',
                'upscale': config.UPSCALE_FACTOR
            }

            response = self.session.post(
                f"{iopaint_url}{config.IOPAINT_UPSCALE_ENDPOINT}",
                json=payload,
                timeout=config.UPSCALE_TIMEOUT
            )

            if response.status_code != 200:
                logger.warning(f"‚ö†Ô∏è Upscaling –Ω–µ —É–¥–∞–ª—Å—è (HTTP {response.status_code})")
                logger.warning(f"Response: {response.text[:500]}")
                return None

            # IOPaint API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
            result_bytes = response.content
            return Image.open(io.BytesIO(result_bytes))

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ upscaling: {e}")
            import traceback
            logger.warning(traceback.format_exc())
            return None

    def _process_single_image(
        self,
        image_path: str,
        output_dir: str,
        iopaint_url: str,
        idx: int,
        total: int
    ) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ + upscaling

        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            iopaint_url: URL IOPaint —Å–µ—Ä–≤–µ—Ä–∞
            idx: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        filename = os.path.basename(image_path)

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(image_path)
            img_width, img_height = img.size
            logger.info(f"üì∏ –§–æ—Ç–æ {filename}: {img_width}x{img_height}")

            # –®–ê–ì 1: –£–¥–∞–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
            logger.info(f"üé≠ –£–¥–∞–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫...")
            cleaned_img = self._remove_watermark(img, iopaint_url)

            if cleaned_img is None:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å {filename}")
                img.close()
                return False

            img.close()
            img = cleaned_img
            img_width, img_height = img.size
            logger.info(f"‚úÖ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —É–¥–∞–ª–µ–Ω")

            # –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –¥–µ–ª–∞–µ–º upscaling –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            current_resolution = img_width * img_height

            if current_resolution < config.MIN_RESOLUTION:
                logger.info(f"üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {img_width}x{img_height} < Full HD - –¥–µ–ª–∞–µ–º upscaling...")
                upscaled_img = self._upscale_image(img, iopaint_url)

                if upscaled_img is not None:
                    img.close()
                    img = upscaled_img
                    img_width, img_height = img.size
                    logger.info(f"‚ú® Upscaling –≤—ã–ø–æ–ª–Ω–µ–Ω: {img_width}x{img_height}")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ upscaling")
            else:
                logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {img_width}x{img_height} - —Ö–æ—Ä–æ—à–µ–µ, upscaling –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

            # –®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_path = os.path.join(output_dir, filename)
            final_buffer = io.BytesIO()

            if img.mode == 'RGBA':
                img = img.convert('RGB')
            img.save(final_buffer, format='PNG')

            with open(output_path, 'wb') as f:
                f.write(final_buffer.getvalue())

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {idx + 1}/{total}: {filename}")
            img.close()
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False

    async def download_and_process_photos(
        self,
        photo_download_url: str,
        bot=None,
        chat_id: int = None,
        progress_message=None,
        iopaint_url: str = None,
        car_data_text: str = None
    ) -> Optional[Tuple[bytes, List[str]]]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ ZIP, —É–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ —á–µ—Ä–µ–∑ IOPaint HTTP API

        Args:
            photo_download_url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–æ—Ç–æ
            bot: Telegram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            progress_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            iopaint_url: URL IOPaint —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
            car_data_text: –¢–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ ZIP

        Returns:
            –ö–æ—Ä—Ç–µ–∂ –∏–∑ (ZIP –∞—Ä—Ö–∏–≤ –≤ –±–∞–π—Ç–∞—Ö, —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–æ—Ç–æ) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if iopaint_url is None:
            iopaint_url = config.IOPAINT_URL

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IOPaint —Å–µ—Ä–≤–µ—Ä–∞
            if not self._check_iopaint_server(iopaint_url):
                return None

            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            temp_dir = tempfile.mkdtemp()
            zip_path = os.path.join(temp_dir, "photos.zip")
            extract_dir = os.path.join(temp_dir, "extracted")
            output_dir = os.path.join(temp_dir, "cleaned")

            os.makedirs(extract_dir, exist_ok=True)
            os.makedirs(output_dir, exist_ok=True)

            # 1. –°–∫–∞—á–∏–≤–∞–µ–º ZIP
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ: {photo_download_url}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å –≤ executor
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: self.session.get(photo_download_url, timeout=config.PHOTO_DOWNLOAD_TIMEOUT)
            )
            response.raise_for_status()

            with open(zip_path, 'wb') as f:
                f.write(response.content)

            # 2. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
            logger.info("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤...")
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)

            # 3. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_files = []
            for ext in config.SUPPORTED_IMAGE_EXTENSIONS:
                image_files.extend(
                    glob.glob(os.path.join(extract_dir, '**', ext), recursive=True)
                )

            if not image_files:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ")
                return None

            logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")

            # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å –ª–∏–º–∏—Ç–æ–º)
            image_files_limited = image_files[:config.PHOTO_PROCESSING_LIMIT]
            logger.info(
                f"üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(image_files_limited)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π "
                f"(–∏–∑ {len(image_files)})..."
            )

            for idx, image_path in enumerate(image_files_limited):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if progress_message:
                    try:
                        # –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                        progress_percent = int((idx / len(image_files_limited)) * 100)
                        filled = int(progress_percent / 5)  # 20 –±–ª–æ–∫–æ–≤ –¥–ª—è 100%
                        empty = 20 - filled
                        progress_bar = "‚ñà" * filled + "‚ñë" * empty

                        progress_text = (
                            f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ: {idx + 1}/{len(image_files_limited)}\n\n"
                            f"[{progress_bar}] {progress_percent}%\n\n"
                            f"‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ + AI Upscaling..."
                        )

                        await progress_message.edit_text(progress_text)
                        logger.info(f"‚úâÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: {idx + 1}/{len(image_files_limited)}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º chat action –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                if bot and chat_id:
                    try:
                        await bot.send_chat_action(
                            chat_id=chat_id,
                            action=ChatAction.UPLOAD_PHOTO
                        )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat action: {e}")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ executor, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
                await loop.run_in_executor(
                    None,
                    self._process_single_image,
                    image_path,
                    output_dir,
                    iopaint_url,
                    idx,
                    len(image_files_limited)
                )

            logger.info("‚úÖ IOPaint –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 100%
            if progress_message:
                try:
                    await progress_message.edit_text(
                        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        f"[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100%\n\n"
                        f"üì¶ –°–æ–∑–¥–∞—ë–º ZIP –∞—Ä—Ö–∏–≤..."
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")

            # 5. –°–æ–∑–¥–∞—ë–º ZIP —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
            cleaned_zip_path = os.path.join(temp_dir, "cleaned_photos.zip")

            processed_files = os.listdir(output_dir)
            if not processed_files:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return None

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–æ—Ç–æ
            cleaned_photo_paths = [
                os.path.join(output_dir, f)
                for f in processed_files
                if os.path.isfile(os.path.join(output_dir, f))
            ]

            with zipfile.ZipFile(cleaned_zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                for file in processed_files:
                    file_path = os.path.join(output_dir, file)
                    if os.path.isfile(file_path):
                        zip_file.write(file_path, arcname=file)

                # –î–æ–±–∞–≤–ª—è–µ–º TXT —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if car_data_text:
                    txt_content = car_data_text.replace('**', '').replace('*', '')
                    zip_file.writestr("car_data.txt", txt_content.encode('utf-8'))
                    logger.info("‚úÖ TXT —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤")

            # –ß–∏—Ç–∞–µ–º ZIP –≤ –ø–∞–º—è—Ç—å
            with open(cleaned_zip_path, 'rb') as f:
                zip_bytes = f.read()

            logger.info(
                f"üì¶ –°–æ–∑–¥–∞–Ω ZIP —Å {len(processed_files)} –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ: "
                f"{len(zip_bytes)} –±–∞–π—Ç"
            )
            return (zip_bytes, cleaned_photo_paths)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            import traceback
            logger.error(traceback.format_exc())

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
            if progress_message:
                try:
                    error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ\n\n"
                    if "timeout" in str(e).lower():
                        error_text += "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                    else:
                        error_text += f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)[:200]}"

                    await progress_message.edit_text(error_text)
                except Exception:
                    pass

            return None

    def format_car_data(self, car_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        if 'error' in car_data:
            return f"‚ùå –û—à–∏–±–∫–∞: {car_data['error']}"
        
        car_name = car_data.get('car_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
        result = f"üöó {car_name}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
        lusaka_price = car_data.get('lusaka_price')
        if lusaka_price:
            result += f"Price - {lusaka_price}\n\n"
        else:
            result += "‚ÑπÔ∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
        
        if car_data.get('specs'):
            result += "üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            for key, value in car_data['specs'].items():
                result += f"‚Ä¢ {key}: {value}\n"
        else:
            result += "‚ÑπÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        return result
    
    def generate_sales_description(self, car_data: Dict) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI

        Args:
            car_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è

        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if self.openai_client is None:
            logger.error("‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {config.OPENAI_MODEL}...")

            car_name = car_data.get('car_name', 'Unknown vehicle')
            specs = car_data.get('specs', {})
            price = car_data.get('lusaka_price', 'Price available on request')

            logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_name}")
            logger.info(f"üí∞ –¶–µ–Ω–∞: {price}")
            logger.info(f"üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(specs)}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            specs_text = "\n".join([f"- {key}: {value}" for key, value in specs.items()])

            prompt = config.OPENAI_USER_PROMPT_TEMPLATE.format(
                car_name=car_name,
                price=price,
                specs_text=specs_text
            )

            logger.info(f"üìù –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = self.openai_client.chat.completions.create(
                model=config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": config.OPENAI_SYSTEM_PROMPT},
                    {"role": "user", "content": prompt}
                ],
                timeout=config.OPENAI_TIMEOUT
            )

            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            logger.info(f"üìä Usage: {response.usage}")

            description = response.choices[0].message.content.strip()
            logger.info(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return description

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())

            if "timeout" in str(e).lower():
                logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
            return None

class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å BeForward –ø–∞—Ä—Å–µ—Ä–æ–º"""

    def __init__(self, token: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

        Args:
            token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.token = token
        self.parser = BeForwardParser()
        self.application = None
        self.url_queue = asyncio.Queue()
        self.is_processing = False
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        await self.set_bot_status("üü¢ –û–Ω–ª–∞–π–Ω")
        
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç, –†—É—Å!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ BeForward.jp\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ /restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\n"
            "üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ BeForward.jp –∏ –ø–æ–ª—É—á–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!"
        )
        
        await update.message.reply_text(welcome_text)
        
    async def restart_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart"""
        restart_text = (
            "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\n"
            "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –†—É—Å!\n"
            "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ BeForward.jp üöó"
        )
        
        await update.message.reply_text(restart_text)
        
    async def handle_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å"""
        url = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ BeForward
        if 'beforward.jp' not in url.lower():
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ BeForward.jp",
                parse_mode='Markdown'
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        await self.url_queue.put({
            'url': url,
            'update': update,
            'context': context
        })

        queue_size = self.url_queue.qsize()

        if queue_size == 1 and not self.is_processing:
            await update.message.reply_text("‚úÖ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        else:
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–∑–∏—Ü–∏—è: {queue_size})")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if not self.is_processing:
            asyncio.create_task(self.process_queue())

    async def process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ URL"""
        if self.is_processing:
            return

        self.is_processing = True
        logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏")

        while not self.url_queue.empty():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = await self.url_queue.get()
                url = task['url']
                update = task['update']
                context = task['context']

                logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é URL –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {url}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                status_message = await update.message.reply_text("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...", parse_mode='Markdown')

                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                    car_data = self.parser.parse_car_data(url)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    await status_message.edit_text("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", parse_mode='Markdown')

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result_text = self.parser.format_car_data(car_data)

                    # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –§–û–¢–û
                    cleaned_zip = None
                    cleaned_photos_paths = None

                    if car_data.get('photo_download_url') and car_data['photo_download_url'] != "COLLECT_PHOTOS":
                        await status_message.edit_text("üé® –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤...\n\n[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")

                        photo_url = car_data['photo_download_url']
                        result = await self.parser.download_and_process_photos(
                            photo_url,
                            bot=context.bot,
                            chat_id=update.effective_chat.id,
                            progress_message=status_message,
                            car_data_text=result_text
                        )

                        if result:
                            cleaned_zip, cleaned_photos_paths = result
                            logger.info(f"‚úÖ –§–æ—Ç–æ –æ—á–∏—â–µ–Ω—ã ({len(cleaned_photos_paths)} —à—Ç.)")

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞)
                    keyboard = []

                    if car_data.get('photo_download_url'):
                        if car_data['photo_download_url'] == "COLLECT_PHOTOS":
                            # –í—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è - —Å–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                            keyboard.append([InlineKeyboardButton("üì∑ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ", callback_data=f"download_photos_{update.message.message_id}")])
                        else:
                            # –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è - —Ñ–æ—Ç–æ –£–ñ–ï –æ—á–∏—â–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–µ–º
                            if cleaned_zip:
                                keyboard.append([InlineKeyboardButton("üì∑ –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ", callback_data=f"download_ready_photos_{update.message.message_id}")])

                    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
                    context.user_data[f"car_data_{update.message.message_id}"] = result_text
                    context.user_data[f"car_full_data_{update.message.message_id}"] = car_data

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ URLs –µ—Å–ª–∏ –µ—Å—Ç—å (–≤—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è)
                    if car_data.get('photo_urls'):
                        context.user_data[f"photo_data_{update.message.message_id}"] = car_data['photo_urls']

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ß–ò–©–ï–ù–ù–´–ï —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if cleaned_zip and cleaned_photos_paths:
                        context.user_data[f"cleaned_zip_{update.message.message_id}"] = cleaned_zip
                        context.user_data[f"cleaned_photos_{update.message.message_id}"] = cleaned_photos_paths

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                        if cleaned_photos_paths:
                            temp_dir = os.path.dirname(os.path.dirname(cleaned_photos_paths[0]))
                            context.user_data[f"temp_dir_{update.message.message_id}"] = temp_dir

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–ø–µ–∫–∏)
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=result_text,
                        disable_web_page_preview=True
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–†–ï–í–¨–Æ (–ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ç–æ) –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if cleaned_photos_paths and len(cleaned_photos_paths) > 0:
                        try:
                            preview_count = min(3, len(cleaned_photos_paths))
                            logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é ({preview_count} —Ñ–æ—Ç–æ)...")

                            media_group = []
                            for idx in range(preview_count):
                                photo_path = cleaned_photos_paths[idx]
                                if os.path.exists(photo_path):
                                    with open(photo_path, 'rb') as photo_file:
                                        photo_bytes = photo_file.read()
                                        media_group.append(InputMediaPhoto(media=photo_bytes))

                            if media_group:
                                await context.bot.send_media_group(
                                    chat_id=update.effective_chat.id,
                                    media=media_group
                                )
                                logger.info(f"‚úÖ –ü—Ä–µ–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({len(media_group)} —Ñ–æ—Ç–æ)")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–≤—å—é: {e}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                    if reply_markup:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=".",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ç–æ—á–∫–∞)
                            reply_markup=reply_markup
                        )

                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await status_message.delete()
                    except:
                        pass

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {e}")
                    await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode='Markdown')

                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.url_queue.task_done()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
                import traceback
                logger.error(traceback.format_exc())

        self.is_processing = False
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")
    
    async def handle_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data

        if callback_data.startswith('download_cleaned_photos_'):
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å –æ—á–∏—Å—Ç–∫–æ–π –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ —á–µ—Ä–µ–∑ IOPaint
            message_id = callback_data.split('_')[3]
            photo_url_key = f"photo_url_{message_id}"
            
            if photo_url_key in context.user_data:
                photo_url = context.user_data[photo_url_key]
                
                progress_msg = await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ...\n\n[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%"
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π progress_message
                result = await self.parser.download_and_process_photos(
                    photo_url,
                    bot=context.bot,
                    chat_id=query.message.chat_id,
                    progress_message=progress_msg
                )
                
                if result:
                    cleaned_zip, cleaned_photos_paths = result

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–æ–º
                    if cleaned_photos_paths:
                        try:
                            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(cleaned_photos_paths)} —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 10 –≤ –∞–ª—å–±–æ–º–µ)")

                            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10 –≤ –∞–ª—å–±–æ–º–µ)
                            media_group = []
                            for idx, photo_path in enumerate(cleaned_photos_paths[:config.TELEGRAM_MEDIA_GROUP_LIMIT]):
                                try:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                    if not os.path.exists(photo_path):
                                        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                                        continue

                                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                                    with open(photo_path, 'rb') as photo_file:
                                        photo_bytes = photo_file.read()
                                        media_group.append(InputMediaPhoto(media=photo_bytes))
                                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {idx + 1}/{min(len(cleaned_photos_paths), config.TELEGRAM_MEDIA_GROUP_LIMIT)}")
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–æ—Ç–æ {photo_path}: {e}")
                                    continue

                            if media_group:
                                logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–∑ {len(media_group)} —Ñ–æ—Ç–æ...")
                                await context.bot.send_media_group(
                                    chat_id=query.message.chat_id,
                                    media=media_group
                                )
                                logger.info("‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                            else:
                                logger.error("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                                await context.bot.send_message(
                                    chat_id=query.message.chat_id,
                                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"
                                )

                            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ 10, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            if len(cleaned_photos_paths) > config.TELEGRAM_MEDIA_GROUP_LIMIT:
                                await context.bot.send_message(
                                    chat_id=query.message.chat_id,
                                    text=f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {config.TELEGRAM_MEDIA_GROUP_LIMIT} —Ñ–æ—Ç–æ –∏–∑ {len(cleaned_photos_paths)}"
                                )
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                            import traceback
                            logger.error(traceback.format_exc())
                            await context.bot.send_message(
                                chat_id=query.message.chat_id,
                                text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)[:200]}"
                            )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ZIP –≤ –ø–∞–º—è—Ç–∏ –∏ –ø—É—Ç—å –∫ temp dir –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                    zip_key = f"cleaned_zip_{message_id}"
                    temp_dir_key = f"temp_dir_{message_id}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                    if cleaned_photos_paths:
                        temp_dir = os.path.dirname(os.path.dirname(cleaned_photos_paths[0]))
                        context.user_data[temp_dir_key] = temp_dir
                    
                    context.user_data[zip_key] = cleaned_zip
                    
                    keyboard = [[InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤", callback_data=f"download_zip_{message_id}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="‚ú® –í—Å–µ —Ñ–æ—Ç–æ –æ—á–∏—â–µ–Ω—ã –æ—Ç –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤!",
                        reply_markup=reply_markup
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
                    del context.user_data[photo_url_key]
                else:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
                    )
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏"
                )

        elif callback_data.startswith('download_ready_photos_'):
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –£–ñ–ï –ì–û–¢–û–í–´–• –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
            message_id = callback_data.split('_')[3]
            cleaned_zip_key = f"cleaned_zip_{message_id}"
            cleaned_photos_key = f"cleaned_photos_{message_id}"
            temp_dir_key = f"temp_dir_{message_id}"

            if cleaned_zip_key in context.user_data and cleaned_photos_key in context.user_data:
                cleaned_zip = context.user_data[cleaned_zip_key]
                cleaned_photos_paths = context.user_data[cleaned_photos_key]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–æ–º
                if cleaned_photos_paths:
                    try:
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(cleaned_photos_paths)} –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 10 –≤ –∞–ª—å–±–æ–º–µ)")

                        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10 –≤ –∞–ª—å–±–æ–º–µ)
                        media_group = []
                        for idx, photo_path in enumerate(cleaned_photos_paths[:config.TELEGRAM_MEDIA_GROUP_LIMIT]):
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                if not os.path.exists(photo_path):
                                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                                    continue

                                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                                with open(photo_path, 'rb') as photo_file:
                                    photo_bytes = photo_file.read()
                                    media_group.append(InputMediaPhoto(media=photo_bytes))
                                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {idx + 1}/{min(len(cleaned_photos_paths), config.TELEGRAM_MEDIA_GROUP_LIMIT)}")
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–æ—Ç–æ {photo_path}: {e}")
                                continue

                        if media_group:
                            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–∑ {len(media_group)} —Ñ–æ—Ç–æ...")
                            await context.bot.send_media_group(
                                chat_id=query.message.chat_id,
                                media=media_group
                            )
                            logger.info("‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        else:
                            logger.error("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                            await context.bot.send_message(
                                chat_id=query.message.chat_id,
                                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"
                            )

                        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ 10, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if len(cleaned_photos_paths) > config.TELEGRAM_MEDIA_GROUP_LIMIT:
                            await context.bot.send_message(
                                chat_id=query.message.chat_id,
                                text=f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {config.TELEGRAM_MEDIA_GROUP_LIMIT} —Ñ–æ—Ç–æ –∏–∑ {len(cleaned_photos_paths)}"
                            )
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                        import traceback
                        logger.error(traceback.format_exc())
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)[:200]}"
                        )

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å ZIP
                keyboard = [[InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤", callback_data=f"download_zip_{message_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
                    reply_markup=reply_markup
                )
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –û—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏"
                )

        elif callback_data.startswith('download_zip_'):
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
            message_id = callback_data.split('_')[2]
            zip_key = f"cleaned_zip_{message_id}"
            temp_dir_key = f"temp_dir_{message_id}"
            
            if zip_key in context.user_data:
                cleaned_zip = context.user_data[zip_key]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP –∞—Ä—Ö–∏–≤
                zip_buffer = io.BytesIO(cleaned_zip)
                zip_buffer.name = "cleaned_photos.zip"
                
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=zip_buffer,
                    caption="üì¶ –ê—Ä—Ö–∏–≤ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ"
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                if temp_dir_key in context.user_data:
                    temp_dir = context.user_data[temp_dir_key]
                    try:
                        shutil.rmtree(temp_dir)
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}")
                    del context.user_data[temp_dir_key]
                
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
                del context.user_data[zip_key]
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª"
                )
                
        elif callback_data.startswith('download_photos_'):
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≤–µ—Ä—Å–∏–∏
            message_id = callback_data.split('_')[2]
            photo_data_key = f"photo_data_{message_id}"
            
            if photo_data_key in context.user_data:
                photo_urls = context.user_data[photo_data_key]
                
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"üì∑ –°–∫–∞—á–∏–≤–∞—é {len(photo_urls)} —Ñ–æ—Ç–æ..."
                )
                
                # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ
                zip_buffer = io.BytesIO()
                
                with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                    for i, photo_url in enumerate(photo_urls):
                        try:
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                            photo_response = self.parser.session.get(photo_url, timeout=10)
                            if photo_response.status_code == 200:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                                if '.jpg' in photo_url or '.jpeg' in photo_url:
                                    ext = '.jpg'
                                elif '.png' in photo_url:
                                    ext = '.png'
                                else:
                                    ext = '.jpg'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∞—Ä—Ö–∏–≤
                                filename = f"photo_{i+1:02d}{ext}"
                                zip_file.writestr(filename, photo_response.content)
                                
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ {i+1}: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP —Ñ–∞–π–ª
                zip_buffer.seek(0)
                zip_buffer.name = "photos.zip"
                
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=zip_buffer,
                    caption="üì∑ –í—Å–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
                )
                
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
                del context.user_data[photo_data_key]
                
            else:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏"
                )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='Markdown'
            )
    
    async def set_bot_status(self, status: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await self.application.bot.set_my_commands([
                {"command": "start", "description": f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ | {status}"},
                {"command": "restart", "description": "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"}
            ])
            logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("restart", self.restart_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_url))
        self.application.add_handler(CallbackQueryHandler(self.handle_download, pattern="^(download_|generate_)"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def post_init(self, application):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        await self.set_bot_status("üü¢ –û–Ω–ª–∞–π–Ω")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    async def post_shutdown(self, application):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        await self.set_bot_status("üî¥ –û—Ñ–ª–∞–π–Ω")
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.setup_application()
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ async –æ–ø–µ—Ä–∞—Ü–∏–π
        self.application.run_polling(drop_pending_updates=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not config.BOT_TOKEN:
        logger.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ: BOT_TOKEN=your_token_here")
        return

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ BeForward Parser Bot...")

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TelegramBot(config.BOT_TOKEN)

    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
