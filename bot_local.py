"""
–õ–æ–∫–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–æ—É—Ç–±—É–∫–µ
–û–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ RunPod Serverless
"""
import asyncio
import base64
import io
import logging
import os
import requests
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from rus_bot import BeForwardParser

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv('.env.local')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
RUNPOD_API_KEY = os.getenv('RUNPOD_API_KEY')
RUNPOD_ENDPOINT_ID = os.getenv('RUNPOD_ENDPOINT_ID')
RUNPOD_API_URL = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/run"
RUNPOD_STATUS_URL = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/status"


class LocalBot:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –≤—ã–∑–æ–≤–æ–º RunPod –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ"""

    def __init__(self, token: str):
        self.token = token
        self.parser = BeForwardParser()
        self.application = None
        self.url_queue = asyncio.Queue(maxsize=20)  # –û—á–µ—Ä–µ–¥—å –¥–æ 20 URL
        self.is_processing = False

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ —Å BeForward.jp\n\n"
            "–¢—ã –ø–æ–ª—É—á–∏—à—å:\n"
            "‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
            "‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n"
        )
        await update.message.reply_text(welcome_text)

    async def handle_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL - –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å"""
        url = update.message.text.strip()

        if 'beforward.jp' not in url.lower():
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ BeForward.jp"
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await update.message.reply_text("‚è≥ –í –æ—á–µ—Ä–µ–¥–∏...")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        await self.url_queue.put({
            'url': url,
            'update': update,
            'context': context,
            'status_msg': status_msg
        })

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if not self.is_processing:
            asyncio.create_task(self.process_queue())

    async def process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ URL"""
        if self.is_processing:
            return

        self.is_processing = True
        logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏")

        while not self.url_queue.empty():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = await self.url_queue.get()
                url = task['url']
                update = task['update']
                context = task['context']
                status_msg = task['status_msg']

                logger.info(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é URL –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {url}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                await self._process_url(url, update, context, status_msg)

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.url_queue.task_done()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
                import traceback
                logger.error(traceback.format_exc())

        self.is_processing = False
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")

    def _download_photos_sync(self, photo_download_url: str, referer_url: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ (–¥–ª—è executor)"""
        import zipfile
        import tempfile

        temp_dir = tempfile.mkdtemp()
        photo_paths = []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        response = self.parser.session.get(
            photo_download_url,
            timeout=120,
            headers={'Referer': referer_url}
        )
        response.raise_for_status()

        zip_path = os.path.join(temp_dir, 'photos.zip')
        with open(zip_path, 'wb') as f:
            f.write(response.content)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)

        # –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    photo_path = os.path.join(root, file)
                    photo_paths.append(photo_path)

        return photo_paths, temp_dir

    async def _process_url(self, url: str, update: Update, context: ContextTypes.DEFAULT_TYPE, status_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ URL"""
        await status_msg.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...")

        try:
            # 1. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º event loop)
            logger.info(f"üìã –ü–∞—Ä—Å–∏–Ω–≥: {url}")
            loop = asyncio.get_event_loop()
            car_data = await loop.run_in_executor(None, self.parser.parse_car_data, url)
            result_text = self.parser.format_car_data(car_data)

            # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
            photo_download_url = car_data.get('photo_download_url')

            if not photo_download_url or photo_download_url == "COLLECT_PHOTOS":
                # –ù–µ—Ç —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await status_msg.edit_text(result_text, disable_web_page_preview=True)
                return

            # 3. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
            try:
                photo_paths, temp_dir = await loop.run_in_executor(
                    None,
                    self._download_photos_sync,
                    photo_download_url,
                    url
                )
                logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(photo_paths)} —Ñ–æ—Ç–æ")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
                await status_msg.edit_text(
                    result_text + f"\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: {str(e)[:100]}",
                    disable_web_page_preview=True
                )
                return

            if not photo_paths:
                await status_msg.edit_text(
                    result_text + "\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    disable_web_page_preview=True
                )
                return

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ RunPod –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            photo_count = min(len(photo_paths), 20)
            await status_msg.edit_text(f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ {photo_count} —Ñ–æ—Ç–æ...")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            # –õ–∏–º–∏—Ç: 20 —Ñ–æ—Ç–æ
            MAX_PHOTOS = 20

            photo_data = []
            for photo_path in photo_paths[:MAX_PHOTOS]:
                with open(photo_path, 'rb') as f:
                    photo_base64 = base64.b64encode(f.read()).decode('utf-8')
                    photo_data.append(photo_base64)

            logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(photo_data)} –∏–∑ {len(photo_paths)} —Ñ–æ—Ç–æ –Ω–∞ RunPod...")

            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º async job
            run_response = requests.post(
                RUNPOD_API_URL,
                json={
                    "input": {
                        "photo_urls": photo_data
                    }
                },
                headers={
                    "Authorization": f"Bearer {RUNPOD_API_KEY}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )

            if run_response.status_code != 200:
                logger.error(f"RunPod error: {run_response.text}")
                await status_msg.edit_text(
                    result_text + "\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    disable_web_page_preview=True
                )
                return

            run_result = run_response.json()
            job_id = run_result.get("id")
            logger.info(f"‚úÖ Job —Å–æ–∑–¥–∞–Ω: {job_id}")

            # 2. Polling —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            max_wait = 300  # 5 –º–∏–Ω—É—Ç
            poll_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            waited = 0

            while waited < max_wait:
                await asyncio.sleep(poll_interval)
                waited += poll_interval

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if waited % 15 == 0:  # –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                    await status_msg.edit_text(f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ... ({waited} —Å–µ–∫)")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status_response = requests.get(
                    f"{RUNPOD_STATUS_URL}/{job_id}",
                    headers={"Authorization": f"Bearer {RUNPOD_API_KEY}"},
                    timeout=10
                )

                if status_response.status_code != 200:
                    continue

                status_result = status_response.json()
                job_status = status_result.get("status")

                logger.info(f"üìä Job status: {job_status}")

                if job_status == "COMPLETED":
                    result = status_result
                    break
                elif job_status == "FAILED":
                    error = status_result.get("error", "Unknown error")
                    await status_msg.edit_text(
                        result_text + f"\n\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error}",
                        disable_web_page_preview=True
                    )
                    return

            else:
                # Timeout
                await status_msg.edit_text(
                    result_text + "\n\n‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
                    disable_web_page_preview=True
                )
                return

            # RunPod –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"status": "COMPLETED", "output": {...}}
            output = result.get("output", {})

            if output.get("status") == "success":
                # –ü–æ–ª—É—á–∞–µ–º ZIP —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ
                zip_base64 = output.get("zip_base64")
                zip_bytes = base64.b64decode(zip_base64)

                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ZIP ({len(zip_bytes)} –±–∞–π—Ç)")

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_msg.delete()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP
                car_name = car_data.get('car_name', 'cleaned_photos').replace('/', '_')
                await update.message.reply_document(
                    document=io.BytesIO(zip_bytes),
                    filename=f"{car_name}.zip",
                    caption=result_text
                )

                logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            else:
                error = output.get("error", result.get("error", "Unknown error"))
                logger.error(f"RunPod error: {error}")
                await status_msg.edit_text(
                    result_text + f"\n\n‚ùå –û—à–∏–±–∫–∞: {error}",
                    disable_web_page_preview=True
                )

            # –û—á–∏—Å—Ç–∫–∞ temp_dir
            import shutil
            shutil.rmtree(temp_dir, ignore_errors=True)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())

            try:
                await status_msg.delete()
            except:
                pass

            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.token).build()

        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_url))

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (polling —Ä–µ–∂–∏–º)...")
        logger.info(f"üì° RunPod endpoint: {RUNPOD_ENDPOINT_ID}")

        self.application.run_polling(drop_pending_updates=True)


def main():
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local")
        return

    if not RUNPOD_API_KEY:
        logger.error("‚ùå RUNPOD_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local")
        return

    bot = LocalBot(BOT_TOKEN)
    bot.run()


if __name__ == "__main__":
    main()
